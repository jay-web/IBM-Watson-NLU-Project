{"version":3,"sources":["components/buttons.js","components/report.js","components/doc.js","utilis/graphData.js","components/entities.js","components/graph.js","components/heading.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","props","text","type","category","renderOutput","size","disabled","className","onClick","changeUi","Report","result","language","usage","text_characters","sentiment","document","label","score","keywords","emotion","sadness","joy","fear","disgust","anger","Doc","style","fontSize","marginTop","marginBottom","renderGraphData","emotions","labels","datasets","data","backgroundColor","borderColor","borderWidth","hoverOffset","EntitiesData","entities","console","log","length","map","e","i","color","relevance","Graph","React","memo","options","height","width","Heading","showTextBox","sendForEmotionAnalysis","rows","cols","id","placeholder","App","state","mode","sentimentOutput","message","showMessage","report","showGraph","showEntities","buttonDisabled","plugins","legend","position","fullSize","boxHeight","boxWidth","font","tooltip","enabled","input_mode","setState","getElementById","value","a","alert","includes","url","fetch","then","response","json","res","err","status","emotionData","Object","keys","this","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gQAgCeA,EA9BC,SAACC,GAAW,IACnBC,EAAsDD,EAAtDC,KAAMC,EAAgDF,EAAhDE,KAAMC,EAA0CH,EAA1CG,SAAUC,EAAgCJ,EAAhCI,aAAcC,EAAkBL,EAAlBK,KAAMC,EAAYN,EAAZM,SAOjD,OACE,mCACE,wBACEC,UAAS,kBAAaL,EAAb,gBAAyBG,EAAzB,cACTG,QAAS,kBATE,SAACL,GAEZC,EAAaD,GAOEM,CAAS,CAACN,cACzBG,SAAUA,EAHZ,SAKGL,OC0BMS,EAzCA,SAACV,GAAW,IACnBW,EAAWX,EAAXW,OACN,OACE,qBAAKJ,UAAU,iBAAf,SAEI,gCACE,+BACE,6CACCI,EAASA,EAAOC,SAAW,MAE9B,+BACE,qDADF,IACkCD,EAASA,EAAOE,MAAMC,gBAAiB,MAEzE,+BACE,+CACCH,EAASA,EAAOI,UAAUC,SAASC,MAAO,MAE7C,+BACE,oDADF,IACiCN,EAASA,EAAOI,UAAUC,SAASE,MAAQ,MAE5E,+BACE,4CADF,IACyBP,EAASA,EAAOQ,SAAS,GAAGC,QAAQC,QAAU,MAEvE,+BACE,wCADF,IACqBV,EAASA,EAAOQ,SAAS,GAAGC,QAAQE,IAAM,MAE/D,+BACE,yCADF,IACsBX,EAASA,EAAOQ,SAAS,GAAGC,QAAQG,KAAM,MAEhE,+BACE,4CADF,IACyBZ,EAASA,EAAOQ,SAAS,GAAGC,QAAQI,QAAS,MAEtE,+BACE,0CADF,IACuBb,EAASA,EAAOQ,SAAS,GAAGC,QAAQK,MAAO,YCnB7DC,EAdH,WACR,OACI,gCACI,oBAAIC,MAAO,CAACC,SAAU,OAAQC,UAAW,OAAQC,aAAc,QAA/D,yCACA,iWAEA,8GCuBKC,EA/BO,SAACC,GA4BrB,MA3Ba,CACXC,OAAQ,CAAC,UAAW,MAAO,OAAQ,UAAW,SAC9CC,SAAU,CACR,CACEjB,MAAO,gBACPkB,KAAMH,EACNI,gBAAiB,CACf,0BACA,yBACA,yBACA,0BACA,0BAGFC,YAAa,CACX,wBACA,wBACA,wBACA,wBACA,yBACA,0BAEFC,YAAa,EACbC,YAAa,MCiBRC,EAvCM,SAACxC,GAAW,IACvByC,EAAazC,EAAbyC,SAER,OADAC,QAAQC,IAAI,MAAOF,GAEjB,qBAAKlC,UAAU,OAAf,SAEIkC,EAASG,OACX,uBAAOrC,UAAU,sCAAjB,SACE,kCAEE,+BACE,sCACA,sCACA,2CACA,8CAEDkC,EAASI,KAAI,SAACC,EAAGC,GACd,IAAIC,EAA8B,aAAtBF,EAAE/B,UAAUE,MAAuB,MAA+B,aAAtB6B,EAAE/B,UAAUE,MAAuB,QAAU,QACvG,OACE,+BACE,6BAAK6B,EAAE5C,OAEP,6BAAK4C,EAAE7C,OAEP,6BAAK6C,EAAEG,YAEP,oBAAItB,MAAO,CAAEqB,MAAOA,GAApB,SAA8BF,EAAE/B,UAAUE,mBAOpD,qF,QCjBSiC,EAdDC,IAAMC,MAAK,SAACpD,GAAW,IAC3BmC,EAAkBnC,EAAlBmC,KAAMkB,EAAYrD,EAAZqD,QAEd,OACE,cAAC,IAAD,CAEElB,KAAMA,EACNmB,OAAQ,IACRC,MAAO,IACPF,QAASA,OCuDAG,EA/DC,SAACxD,GAAW,IACjBI,EAAoDJ,EAApDI,aAAcqD,EAAsCzD,EAAtCyD,YAAYC,EAA0B1D,EAA1B0D,uBAGjC,OACI,sBAAKnD,UAAU,oBAAf,UACA,sBAAKA,UAAU,4BAAf,UACE,mDACA,cAAC,EAAD,CACEL,KAAK,OACLD,KAAK,OACLE,SAAS,OACTC,aAAcA,EACdC,KAAK,KACLC,UAAU,IAEZ,cAAC,EAAD,CACEJ,KAAK,OACLD,KAAK,MACLE,SAAS,MACTC,aAAcA,EACdC,KAAK,KACLC,UAAU,OAKd,qBAAKC,UAAU,wBAAf,SACGkD,EACC,0BACEE,KAAK,IACLC,KAAK,KACLC,GAAG,YACHC,YAAY,qCAGd,0BACEH,KAAK,IACLC,KAAK,KACLC,GAAG,YACHC,YAAY,sCAIlB,qBAAKvD,UAAU,2BAAf,SACE,sBAAKA,UAAU,sBAAf,UACE,kDAGA,cAAC,EAAD,CACEL,KAAK,UACLD,KAAK,mBACLE,SAAS,GACTC,aAAcsD,EACdrD,KAAK,KACLC,UAAU,aC6JTyD,E,4MA3MbC,MAAQ,CACNP,aAAa,EACbQ,KAAM,OACNC,gBAAiB,cAAC,EAAD,IAEjBlB,MAAO,GAEPmB,QAAS,kBACTC,aAAa,EACbC,OAAQ,KACRC,WAAW,EACXtC,SAAU,GACVS,SAAU,GACV8B,cAAc,EACdC,gBAAgB,EAChBnB,QAAS,CACPoB,QAAS,CACPC,OAAQ,CACNC,SAAU,QAEVC,UAAU,EACV3C,OAAQ,CACN4C,UAAW,IACXC,SAAU,IACVC,KAAM,CACJ1E,KAAM,MAIZ2E,QAAS,CACPC,SAAS,M,EAMjB7E,aAAe,SAAC8E,GACc,SAAxBA,EAAW/E,SACb,EAAKgF,SAAS,CACZlB,KAAM,OACNR,aAAa,IAGf,EAAK0B,SAAS,CACZlB,KAAM,MACNR,aAAa,IAIjB,EAAK0B,SAAS,CACZjB,gBAAiB,cAAC,EAAD,IACjBjE,KAAM,GACNqE,WAAW,EACXC,cAAc,EACdF,OAAQ,OAEVrD,SAASoE,eAAe,aAAaC,MAAQ,I,EAG/C3B,uB,sBAAyB,gCAAA4B,EAAA,yDACvB,EAAKH,SAAS,CAAEf,aAAa,IAIjB,KAHRnE,EAAOe,SAASoE,eAAe,aAAaC,OAFzB,uBAMrBE,MAAM,6BACN,EAAKJ,SAAS,CAAEf,aAAa,IAPR,6BAUA,OAAnB,EAAKJ,MAAMC,MAAkBhE,EAAKuF,SAAS,QAVxB,wBAWrBD,MAAM,+CACN,EAAKJ,SAAS,CAAEf,aAAa,IAZR,2BAkBnBqB,EAAM,IACNxB,EAAO,EAAKD,MAAMC,KACtBwB,EACEA,EACA,IACAxB,EACA,YACAA,EACA,IACAjD,SAASoE,eAAe,aAAaC,MAEvCK,MAAMD,GAAKE,MAAK,SAACC,GACfA,EAASC,OAAOF,MAAK,SAACG,GAEpB,GAAIA,EAAIC,KAA0B,MAAnBD,EAAIC,IAAIC,OACrBT,MAAMO,EAAIC,IAAI5B,aADhB,CAMA,IAAIhC,EAAO2D,EAAI3E,SAAS,GAAGC,QAE3B,GAAIe,EAAK4D,IACP,EAAKZ,SAAS,CAAElF,KAAM,yEADxB,CAKA,IAAIgG,EAAcC,OAAOC,KAAKhE,GAAMU,KAAI,SAACC,EAAGC,GAC1C,OAAOZ,EAAKW,MAGd,EAAKqC,SAAS,CACZnD,SAAUiE,EACV3B,WAAW,EACXE,gBAAgB,EAChBJ,aAAa,EACbC,OAAQyB,EACRrD,SAAUqD,EAAIrD,mBAvDG,4C,4CAgEzB,WAAU,IAAD,OACP,OACE,qBAAKlC,UAAU,MAAf,SACE,sBAAKA,UAAU,uBAAf,UAEE,cAAC,EAAD,CACEH,aAAcgG,KAAKhG,aACnBqD,YAAa2C,KAAKpC,MAAMP,YACxBC,uBAAwB0C,KAAK1C,yBAI/B,sBAAKnD,UAAU,qBAAf,UACE,qBAAKA,UAAU,QAAQsD,GAAG,iBAA1B,SACE,gCACE,iDACA,cAAC,EAAD,CAAQlD,OAAQyF,KAAKpC,MAAMK,cAI/B,sBAAK9D,UAAU,QAAQsD,GAAG,iBAA1B,UACE,sBAAKtD,UAAU,qBAAf,UACE,sBAAKA,UAAU,yBAAf,UACE,cAAC,EAAD,CACEL,KAAK,UACLD,KAAK,kBACLE,SAAS,GACTC,aAAc,kBACZ,EAAK+E,SAAS,CAAEb,WAAW,EAAMC,cAAc,KAEjDlE,KAAK,KACLC,SAAU8F,KAAKpC,MAAMQ,iBAEvB,cAAC,EAAD,CACEtE,KAAK,YACLD,KAAK,gBACLE,SAAS,GACTC,aAAc,kBACZ,EAAK+E,SAAS,CAAEZ,cAAc,EAAMD,WAAW,KAEjDjE,KAAK,KACLC,SAAU8F,KAAKpC,MAAMQ,oBAGzB,sBAAKjE,UAAU,yBAAf,UACE,iDACA,6BACG6F,KAAKpC,MAAMK,OACR+B,KAAKpC,MAAMM,UACT,yBACA,+BACF,aAIV,qBAAK/D,UAAU,qBAAf,SACE,sBAAKA,UAAU,SAAf,UACG6F,KAAKpC,MAAMM,UACV,cAAC,EAAD,CACEnC,KAAMJ,EAAgBqE,KAAKpC,MAAMhC,UACjCqB,QAAS+C,KAAKpC,MAAMX,UAEpB+C,KAAKpC,MAAMO,aACb,cAAC,EAAD,CAAc9B,SAAU2D,KAAKpC,MAAMvB,WAEnC2D,KAAKpC,MAAME,gBAEb,uBACCkC,KAAKpC,MAAMI,YAAcgC,KAAKpC,MAAMG,QAAU,yB,GAhM/ChB,IAAMkD,WCDTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhG,SAASoE,eAAe,SAM1BkB,K","file":"static/js/main.1522c8b0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Buttons = (props) => {\n    let {text, type, category, renderOutput, size, disabled} = props;\n\n    let changeUi = (category) => {\n      \n        renderOutput(category)\n        \n    }\n  return (\n    <>\n      <button\n        className={`btn btn-${type} btn-${size} mr-2 mt-2`}\n        onClick={() => changeUi({category}) }\n        disabled={disabled}\n      >\n        {text}\n      </button>\n\n      {/* <button\n        className=\"btn btn-dark mt-2\"\n        onClick={() => {\n          this.renderOutput({category});\n        }}\n      >\n        URL\n      </button> */}\n    </>\n  );\n};\n\nexport default Buttons;","import React from \"react\";\n\nconst Report = (props) => {\n  let { result } = props;\n  return (\n    <div className=\"report-section\">\n      \n        <div>\n          <li>\n            <span>Language:</span>\n            {result ? result.language : \"\"}\n          </li>\n          <li>\n            <span>Total characters:</span> {result ? result.usage.text_characters: \"\"}\n          </li>\n          <li>\n            <span>Sentiment: </span>\n            {result ? result.sentiment.document.label: \"\"}\n          </li>\n          <li>\n            <span>Sentiment Score:</span> {result ? result.sentiment.document.score : \"\"}\n          </li>\n          <li>\n            <span>Sadness:</span> {result ? result.keywords[0].emotion.sadness : \"\"}\n          </li>\n          <li>\n            <span>Joy:</span> {result ? result.keywords[0].emotion.joy : \"\"}\n          </li>\n          <li>\n            <span>Fear:</span> {result ? result.keywords[0].emotion.fear: \"\"}\n          </li>\n          <li>\n            <span>Disgust:</span> {result ? result.keywords[0].emotion.disgust: \"\"}\n          </li>\n          <li>\n            <span>Anger:</span> {result ? result.keywords[0].emotion.anger: \"\"}\n          </li>\n        </div>\n      \n    </div>\n  );\n};\n\nexport default Report;\n","import React from \"react\";\n\nconst Doc = () => {\n    return (\n        <div>\n            <h5 style={{fontSize: \"2rem\", marginTop: \"3rem\", marginBottom: \"1rem\"}}>Sentiment Emotions Analyzer</h5>\n            <p>Natural Language Understanding uses deep learning to extract meaning and metadata from unstructured text data. Get underneath your data using text analytics to extract categories, classification, entities, keywords, sentiment, emotion, relations, and syntax.\n            It enable us to analyse the text or url of your website page.</p>\n            <p>Type any text or url in above text box, click the Analysis Emotion button</p>\n        \n        </div>\n    )\n\n\n}\n\nexport default Doc;","const renderGraphData = (emotions) => {\n    const data = {\n      labels: [\"Sadness\", \"Joy\", \"Fear\", \"Disgust\", \"Anger\"],\n      datasets: [\n        {\n          label: \"# of Emotions\",\n          data: emotions,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(28, 112, 196,0.8)\",\n            \"rgba(196, 112, 28,0.8)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(196, 28, 28, 0.8)\",\n           \n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(196, 28, 28, 0.8)\",\n          ],\n          borderWidth: 1,\n          hoverOffset: 4\n        },\n      ],\n    };\n    return data;\n  };\n\n  export default renderGraphData","import React from \"react\";\n\nconst EntitiesData = (props) => {\n  const { entities } = props;\n  console.log(\"et \", entities);\n  return (\n    <div className=\"mt-4\">\n      {\n        entities.length ?\n      <table className=\"table table-bordered table-striped \">\n        <tbody>\n         \n          <tr>\n            <th>Type</th>\n            <th>Name</th>\n            <th>Relevance</th>\n            <th>Sentiment</th>\n          </tr>\n          {entities.map((e, i) => {\n              let color = e.sentiment.label === \"negative\" ? \"red\" :  e.sentiment.label === \"positive\" ? \"green\" : \"black\";\n            return (\n              <tr>\n                <td>{e.type}</td>\n\n                <td>{e.text}</td>\n\n                <td>{e.relevance}</td>\n\n                <td style={{ color: color }}>{e.sentiment.label}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      :\n      <h3>No entities are available in your searching text</h3>\n}\n    </div>\n  );\n};\n\nexport default EntitiesData;\n","import React from \"react\";\n\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst Graph = React.memo((props) => {\n  const { data, options } = props;\n   \n  return (\n    <Doughnut\n\n      data={data}\n      height={400}\n      width={400}\n      options={options}\n    />\n  );\n});\n\nexport default Graph;\n","import React from \"react\";\nimport \"../../src/bootstrap.min.css\";\nimport \"../../src/App.css\";\nimport Buttons from \"../components/buttons\";\n\nconst Heading = (props) => {\n    const {renderOutput, showTextBox,sendForEmotionAnalysis} = props;\n\n\n    return (\n        <div className=\"row input-section\">\n        <div className=\"col-3 selection mb-2 mt-1\">\n          <h5>Select Input type</h5>\n          <Buttons\n            type=\"info\"\n            text=\"Text\"\n            category=\"text\"\n            renderOutput={renderOutput}\n            size=\"sm\"\n            disabled={false}\n          />\n          <Buttons\n            type=\"dark\"\n            text=\"Url\"\n            category=\"url\"\n            renderOutput={renderOutput}\n            size=\"sm\"\n            disabled={false}\n          />\n\n          {/* <input className=\"mt-2\" type=\"text\" id=\"target\" name=\"target\" placeholder=\"Words to target (optional)\" /> */}\n        </div>\n        <div className=\"col-6 content-section\">\n          {showTextBox ? (\n            <textarea\n              rows=\"4\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type text here to analyze\"\n            />\n          ) : (\n            <textarea\n              rows=\"1\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type url here to analyze\"\n            />\n          )}\n        </div>\n        <div className=\"col-3 navigation-section\">\n          <div className=\"selection mb-2 mt-1\">\n            <h5>Run Analyze type</h5>\n          \n\n            <Buttons\n              type=\"primary\"\n              text=\" Analyze Emotion\"\n              category=\"\"\n              renderOutput={sendForEmotionAnalysis}\n              size=\"sm\"\n              disabled={false}\n            />\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Heading;","import \"./bootstrap.min.css\";\nimport \"./App.css\";\n\nimport React from \"react\";\nimport Buttons from \"./components/buttons\";\nimport Report from \"./components/report\";\nimport Doc from \"./components/doc\";\n\nimport renderGraphData from \"./utilis/graphData\";\nimport EntitiesData from \"./components/entities\";\nimport Graph from \"./components/graph\";\nimport Heading from \"./components/heading\";\n\nclass App extends React.Component {\n  state = {\n    showTextBox: true,\n    mode: \"text\",\n    sentimentOutput: <Doc />,\n    \n    color: \"\",\n\n    message: \"Please wait ...\",\n    showMessage: false,\n    report: null,\n    showGraph: false,\n    emotions: [],\n    entities: [],\n    showEntities: false,\n    buttonDisabled: true,\n    options: {\n      plugins: {\n        legend: {\n          position: \"right\",\n          // maxHeight: \"200px\"\n          fullSize: true,\n          labels: {\n            boxHeight: 100,\n            boxWidth: 100,\n            font: {\n              size: 30,\n            },\n          },\n        },\n        tooltip: {\n          enabled: false,\n        },\n      },\n    },\n  };\n\n  renderOutput = (input_mode) => {\n    if (input_mode.category === \"text\") {\n      this.setState({\n        mode: \"text\",\n        showTextBox: true,\n      });\n    } else {\n      this.setState({\n        mode: \"url\",\n        showTextBox: false,\n      });\n    }\n\n    this.setState({\n      sentimentOutput: <Doc />,\n      text: \"\",\n      showGraph: false,\n      showEntities: false,\n      report: null,\n    });\n    document.getElementById(\"textinput\").value = \"\";\n  };\n\n  sendForEmotionAnalysis = async () => {\n    this.setState({ showMessage: true });\n    let text = document.getElementById(\"textinput\").value;\n    // let target = document.getElementById(\"target\");\n\n    if (text == \"\") {\n      alert(\"Please enter the sentence\");\n      this.setState({ showMessage: false });\n      return;\n    }\n    if (this.state.mode == \"url\" && !text.includes(\"http\")) {\n      alert(\"Please type url or change the input type !!\");\n      this.setState({ showMessage: false });\n      return;\n    }\n\n  \n\n    let url = \".\";\n    let mode = this.state.mode;\n    url =\n      url +\n      \"/\" +\n      mode +\n      \"/emotion?\" +\n      mode +\n      \"=\" +\n      document.getElementById(\"textinput\").value;\n\n    fetch(url).then((response) => {\n      response.json().then((res) => {\n       \n        if (res.err && res.err.status === 400) {\n          alert(res.err.message);\n          return;\n        }\n\n\n        let data = res.keywords[0].emotion;\n        // res.send(analysisResults.result.keywords[0].emotion, null, 2);\n        if (data.err) {\n          this.setState({ text: <h1>Please enter more text to analyse</h1> });\n          return;\n        }\n        \n        let emotionData = Object.keys(data).map((e, i) => {\n          return data[e];\n        });\n\n        this.setState({\n          emotions: emotionData,\n          showGraph: true,\n          buttonDisabled: false,\n          showMessage: false,\n          report: res, \n          entities: res.entities\n        });\n\n        // this.setState({ sentimentOutput: <EmotionTable emotions={data} /> });\n        // document.getElementById(\"textinput\").value = \"\";\n      });\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid main\">\n          {/* // input-section */}\n          <Heading\n            renderOutput={this.renderOutput}\n            showTextBox={this.state.showTextBox}\n            sendForEmotionAnalysis={this.sendForEmotionAnalysis}\n          />\n\n          {/* output section */}\n          <div className=\"row output-section\">\n            <div className=\"col-3\" id=\"report-section\">\n              <div>\n                <h5>Analysis Report</h5>\n                <Report result={this.state.report} />\n              </div>\n            </div>\n\n            <div className=\"col-9\" id=\"result-section\">\n              <div className=\"row result-heading\">\n                <div className=\"col-6 heading-content \">\n                  <Buttons\n                    type=\"primary\"\n                    text=\"Doughnut Format\"\n                    category=\"\"\n                    renderOutput={() =>\n                      this.setState({ showGraph: true, showEntities: false })\n                    }\n                    size=\"sm\"\n                    disabled={this.state.buttonDisabled}\n                  />\n                  <Buttons\n                    type=\"secondary\"\n                    text=\"Entities Data\"\n                    category=\"\"\n                    renderOutput={() =>\n                      this.setState({ showEntities: true, showGraph: false })\n                    }\n                    size=\"sm\"\n                    disabled={this.state.buttonDisabled}\n                  />\n                </div>\n                <div className=\"col-6 heading-content \">\n                  <h5>Analysis Result</h5>\n                  <h6>\n                    {this.state.report\n                      ? this.state.showGraph\n                        ? \"( In Doughnut Format )\"\n                        : \"( Entities Data Collection )\"\n                      : null}\n                  </h6>\n                </div>\n              </div>\n              <div className=\"row result-display\">\n                <div className=\"col-12\">\n                  {this.state.showGraph ? (\n                    <Graph\n                      data={renderGraphData(this.state.emotions)}\n                      options={this.state.options}\n                    />\n                  ) : this.state.showEntities ? (\n                    <EntitiesData entities={this.state.entities} />\n                  ) : (\n                    this.state.sentimentOutput\n                  )}\n                  <br />\n                  {this.state.showMessage ? this.state.message : null}\n                </div>\n              </div>\n            </div>\n            {/* <div className=\"col-4\"></div> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}