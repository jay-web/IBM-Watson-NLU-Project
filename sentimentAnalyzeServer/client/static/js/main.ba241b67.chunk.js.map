{"version":3,"sources":["reducer/actionTypes.js","components/doc.js","reducer/reducer.js","components/report.js","components/buttons.js","components/heading.js","components/resultHeading.js","utilis/graphData.js","components/graph.js","components/entities.js","components/showResult.js","App.js","reportWebVitals.js","index.js"],"names":["types","Doc","style","fontSize","marginTop","marginBottom","StoreContext","React","createContext","INITIAL_STATE","showTextBox","mode","sentimentOutput","color","message","showMessage","report","showGraph","emotions","entities","showEntities","buttonDisabled","setGraphProperty","reducer","state","action","type","payload","Report","useContext","console","log","renderEmoji","emotion","className","language","usage","text_characters","sentiment","document","label","score","keywords","sadness","joy","fear","disgust","anger","Buttons","props","text","category","renderOutput","size","disabled","onClick","changeUi","Heading","sendForEmotionAnalysis","globalState","dispatch","textBoxRef","useRef","useEffect","current","focus","switchTextBox","input_mode","value","rows","cols","id","placeholder","ref","ResultHeading","renderGraphData","labels","datasets","data","backgroundColor","borderColor","borderWidth","hoverOffset","Graph","memo","options","plugins","legend","position","fullSize","boxHeight","boxWidth","font","tooltip","enabled","height","width","ShowEntities","length","map","e","i","relevance","ShowResult","App","useReducer","window","innerWidth","a","getElementById","alert","includes","url","fetch","then","response","json","res","err","status","emotionData","Object","keys","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ba241b67.chunk.js","sourcesContent":["\r\nexport const types = {\r\n    SHOW_TEXTBOX : 'showTextBox',\r\n    UPDATE_EMOTIONS :'updateEmotions',\r\n    UPDATE_ENTITIES : 'updateEntities',\r\n    SHOW_MESSAGE : 'showMessage',\r\n    SHOW_GRAPH : 'showGraph',\r\n    SHOW_ENTITIES : 'showEntities',\r\n    UPDATE_COLOR : 'updateColor',\r\n    UPDATE_REPORT : 'updateReport',\r\n    UPDATE_MODE : 'updateMode',\r\n    UPDATE_SENTIMENT_OUTPUT : 'update_sentiment_output',\r\n    DISABLE_BUTTON : 'disableButton',\r\n    SET_GRAPH_PROPERTY : 'setGraphProperty'\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nconst Doc = () => {\r\n    return (\r\n        <div>\r\n            <h5 style={{fontSize: \"2rem\", marginTop: \"3rem\", marginBottom: \"1rem\"}}>Sentiment Emotions Analyzer</h5>\r\n            <p>Natural Language Understanding uses deep learning to extract meaning and metadata from unstructured text data. Get underneath your data using text analytics to extract categories, classification, entities, keywords, sentiment, emotion, relations, and syntax.\r\n            It enable us to analyse the text or url of your website page.</p>\r\n            <p>Type any text or url in above text box, click the Analysis Emotion button</p>\r\n        \r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Doc;","import React from 'react';\r\nimport {types} from \"./actionTypes\";\r\nimport Doc from \"../components/doc\";\r\n\r\nexport const StoreContext = React.createContext([]);\r\n\r\n\r\nexport const INITIAL_STATE = {\r\n  showTextBox: true,\r\n  mode: \"text\",\r\n  sentimentOutput: <Doc />,\r\n  color: \"\",\r\n  message: \"Please wait ...\",\r\n  showMessage: false,\r\n  report: null,\r\n  showGraph: false,\r\n  emotions: [],\r\n  entities: [],\r\n  showEntities: false,\r\n  buttonDisabled: true,\r\n  setGraphProperty: true,\r\n\r\n};\r\n\r\n\r\nexport const reducer = (state, action) => {\r\n    switch(action.type) {\r\n        case types.SHOW_TEXTBOX :\r\n            return {...state, showTextBox: action.payload}\r\n        case types.UPDATE_MODE :\r\n            return {...state, mode : action.payload}\r\n        case types.UPDATE_SENTIMENT_OUTPUT :\r\n            return {...state, sentimentOutput: action.payload}\r\n        case types.UPDATE_COLOR :\r\n            return {...state, color: action.payload}\r\n        case types.SHOW_MESSAGE :\r\n            return {...state, showMessage: action.payload}\r\n        case types.UPDATE_REPORT :\r\n            return {...state, report : action.payload}\r\n        case types.SHOW_GRAPH :\r\n            return {...state, showGraph : action.payload}\r\n        case types.UPDATE_EMOTIONS :\r\n            return {...state, emotions: action.payload }\r\n        case types.UPDATE_ENTITIES :\r\n            return {...state, entities : action.payload}\r\n        case types.SHOW_ENTITIES :\r\n            return {...state, showEntities : action.payload}\r\n        case types.DISABLE_BUTTON :\r\n            return {...state, buttonDisabled : action.payload }\r\n        case types.SET_GRAPH_PROPERTY:\r\n            return {...state, setGraphProperty : action.payload }\r\n        default :\r\n            return state;\r\n    }\r\n}\r\n\r\n","import React, {useContext} from \"react\";\r\nimport { StoreContext } from \"../reducer/reducer\";\r\n\r\nconst Report = () => {\r\n  const [globalState] = useContext(StoreContext);\r\n\r\n  let { report } = globalState;\r\n  console.log(\"report \", report);\r\n  let renderEmoji = (emotion) => {\r\n      let emojies = {\"positive\": \"😊\", \"negative\": \"😠\", \"neutral\": \"😐\", \"joy\":\"😃\", \"sadness\": \"😢\", \"fear\": \"😨\", \"anger\": \"😡\", \"disgust\": \"😖\"}\r\n      return emojies[emotion];\r\n  }\r\n  return (\r\n    <div className=\"report-section\">\r\n      \r\n        <div>\r\n          <li>\r\n            <span>Language:</span>\r\n            {report ? report.language : \"\"}\r\n          </li>\r\n          <li>\r\n            <span>Total characters:</span> {report ? report.usage.text_characters: \"\"} \r\n          </li>\r\n          <li>\r\n            <span>Sentiment: </span>\r\n            {report ? report.sentiment.document.label: \"\"} {report ? renderEmoji(report.sentiment.document.label) : null}\r\n          </li>\r\n          <li>\r\n            <span>Sentiment Score:</span> {report ? report.sentiment.document.score : \"\"}\r\n          </li>\r\n          <li>\r\n            <span>Sadness:</span> {report ? report.keywords[0].emotion.sadness : \"\"} {report ? renderEmoji(\"sadness\") : null}\r\n          </li>\r\n          <li>\r\n            <span>Joy:</span> {report ? report.keywords[0].emotion.joy : \"\"} {report ? renderEmoji(\"joy\") : null}\r\n          </li>\r\n          <li>\r\n            <span>Fear:</span> {report ? report.keywords[0].emotion.fear : \"\"} {report ? renderEmoji(\"fear\") : null}\r\n          </li>\r\n          <li>\r\n            <span>Disgust:</span> {report ? report.keywords[0].emotion.disgust : \"\"} {report ? renderEmoji(\"disgust\"  ) : null}\r\n          </li>\r\n          <li>\r\n            <span>Anger:</span> {report ? report.keywords[0].emotion.anger: \"\"} {report ? renderEmoji(\"anger\") : null}\r\n          </li>\r\n        </div>\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n","import React from \"react\";\r\n\r\nconst Buttons = (props) => {\r\n    let {text, type, category, renderOutput, size, disabled} = props;\r\n\r\n    let changeUi = (category) => {\r\n      \r\n        renderOutput(category)\r\n        \r\n    }\r\n  return (\r\n    <>\r\n      <button\r\n        className={`btn btn-${type} btn-${size} mr-2 mt-2`}\r\n        onClick={() => changeUi({category}) }\r\n        disabled={disabled}\r\n      >\r\n        {text}\r\n      </button>\r\n\r\n      {/* <button\r\n        className=\"btn btn-dark mt-2\"\r\n        onClick={() => {\r\n          this.renderOutput({category});\r\n        }}\r\n      >\r\n        URL\r\n      </button> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Buttons;","import React, {useContext, useEffect, useRef, useState} from \"react\";\r\nimport { StoreContext } from \"../reducer/reducer\";\r\nimport \"../../src/bootstrap.min.css\";\r\nimport \"../../src/App.css\";\r\nimport Buttons from \"../components/buttons\";\r\nimport { types } from \"../reducer/actionTypes\";\r\nimport Doc from \"./doc\";\r\n\r\nconst Heading = (props) => {\r\n    const {sendForEmotionAnalysis} = props;\r\n    const [globalState, dispatch ] = useContext(StoreContext);\r\n    const {showTextBox } = globalState;\r\n    const textBoxRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n      textBoxRef.current.focus();\r\n    }, [])\r\n\r\n    let switchTextBox = (input_mode) => {\r\n      textBoxRef.current.focus();\r\n      dispatch({ type: types.DISABLE_BUTTON, payload: true});\r\n  \r\n      if (input_mode.category === \"text\") {\r\n          dispatch({ type: types.UPDATE_MODE, payload: 'text'});\r\n          dispatch({ type: types.SHOW_TEXTBOX, payload: true});\r\n  \r\n       \r\n      } else {\r\n          dispatch({ type: types.UPDATE_MODE, payload: 'url'});\r\n          dispatch({ type: types.SHOW_TEXTBOX, payload: false});\r\n      \r\n      }\r\n      dispatch({ type: types.UPDATE_SENTIMENT_OUTPUT, payload: <Doc /> });\r\n      dispatch({ type: types.SHOW_GRAPH, payload: false});\r\n      dispatch({ type: types.SHOW_ENTITIES, payload: false});\r\n      dispatch({ type: types.UPDATE_REPORT, payload: null});\r\n  \r\n     \r\n      textBoxRef.current.value = \"\"\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"row input-section\">\r\n        <div className=\"col-sm-12 col-md-3 selection mb-2 mt-1\">\r\n          <h5>Select Input type</h5>\r\n          <Buttons\r\n            type=\"info\"\r\n            text=\"Text\"\r\n            category=\"text\"\r\n            renderOutput={switchTextBox}\r\n            size=\"sm\"\r\n            disabled={false}\r\n          />\r\n          <Buttons\r\n            type=\"dark\"\r\n            text=\"Url\"\r\n            category=\"url\"\r\n            renderOutput={switchTextBox}\r\n            size=\"sm\"\r\n            disabled={false}\r\n          />\r\n\r\n          {/* <input className=\"mt-2\" type=\"text\" id=\"target\" name=\"target\" placeholder=\"Words to target (optional)\" /> */}\r\n        </div>\r\n        <div className=\"col-sm-12 col-md-6 content-section mb-2 mt-1\">\r\n          {showTextBox ? (\r\n            <textarea\r\n              rows=\"4\"\r\n              cols=\"70\"\r\n              id=\"textinput\"\r\n              placeholder=\"Please type text here to analyze\"\r\n              ref={textBoxRef}\r\n            />\r\n          ) : (\r\n            <textarea\r\n              rows=\"1\"\r\n              cols=\"70\"\r\n              id=\"textinput\"\r\n              placeholder=\"Please type url here to analyze\"\r\n              ref={textBoxRef}\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"col-sm-12 col-md-3 navigation-section\">\r\n          <div className=\"selection mb-2 mt-1\">\r\n            <h5>Run Analysis</h5>\r\n          \r\n\r\n            <Buttons\r\n              type=\"primary\"\r\n              text=\" Analyze Emotion\"\r\n              category=\"\"\r\n              renderOutput={sendForEmotionAnalysis}\r\n              size=\"sm\"\r\n              disabled={false}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Heading;","import React, {Fragment, useContext} from \"react\";\r\nimport { StoreContext } from \"../reducer/reducer\";\r\nimport Buttons from \"./buttons\";\r\nimport \"../../src/bootstrap.min.css\";\r\nimport { types } from \"../reducer/actionTypes\";\r\n\r\nconst ResultHeading = () => {\r\n    const [globalState, dispatch ] = useContext(StoreContext);\r\n    return (\r\n        <Fragment>\r\n        <div className=\"col-6 heading-content \">\r\n        <Buttons\r\n          type=\"primary\"\r\n          text=\"Doughnut Format\"\r\n          category=\"\"\r\n          renderOutput={() => {\r\n            dispatch({type: types.SHOW_GRAPH, payload: true });\r\n            dispatch({type: types.SHOW_ENTITIES, payload: false })\r\n          }\r\n          }\r\n          size=\"sm\"\r\n          disabled={globalState.buttonDisabled}\r\n        />\r\n\r\n        <Buttons\r\n          type=\"secondary\"\r\n          text=\"Entities Data\"\r\n          category=\"\"\r\n          renderOutput={() => {\r\n             dispatch({type: types.SHOW_GRAPH , payload: false});\r\n             dispatch({type: types.SHOW_ENTITIES, payload: true });\r\n          }\r\n          }\r\n          size=\"sm\"\r\n          disabled={globalState.buttonDisabled}\r\n        />\r\n        \r\n      </div>\r\n      <div className=\"col-6 heading-content \">\r\n                  <h5>Analysis Result</h5>\r\n                  <h6>\r\n                    {globalState.report\r\n                      ? globalState.showGraph\r\n                        ? \"( In Doughnut Format )\"\r\n                        : \"( Entities Data Collection )\"\r\n                      : null}\r\n                  </h6>\r\n                </div>\r\n      </Fragment>\r\n      \r\n    )\r\n}\r\n\r\nexport default ResultHeading;","const renderGraphData = (emotions) => {\r\n  console.log(\"emotions \", emotions);\r\n    const data = {\r\n      labels: [`Sadness - ( ${emotions[0]} )`, `Joy - ( ${emotions[1]} )`, `Fear - ( ${emotions[2]} )`, `Disgust - ( ${emotions[3]} )`, `Anger - ( ${emotions[4]} )`],\r\n      datasets: [\r\n        {\r\n          label: \"# of Emotions\",\r\n          data: emotions,\r\n          backgroundColor: [\r\n            \"rgba(255, 99, 132, 0.2)\",\r\n            \"rgba(28, 112, 196,0.8)\",\r\n            \"rgba(196, 112, 28,0.8)\",\r\n            \"rgba(75, 192, 192, 0.2)\",\r\n            \"rgba(196, 28, 28, 0.8)\",\r\n           \r\n          ],\r\n          borderColor: [\r\n            \"rgba(255, 99, 132, 1)\",\r\n            \"rgba(54, 162, 235, 1)\",\r\n            \"rgba(255, 206, 86, 1)\",\r\n            \"rgba(75, 192, 192, 1)\",\r\n            \"rgba(153, 102, 255, 1)\",\r\n            \"rgba(196, 28, 28, 0.8)\",\r\n          ],\r\n          borderWidth: 1,\r\n          hoverOffset: 4\r\n        },\r\n      ],\r\n    };\r\n    return data;\r\n  };\r\n\r\n  export default renderGraphData","import React, {useContext} from \"react\";\r\nimport { StoreContext } from \"../reducer/reducer\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nconst Graph = React.memo((props) => {\r\n  const [globalState ] = useContext(StoreContext);\r\n\r\n  const { data } = props;\r\n  const options = {\r\n    plugins: {\r\n      legend: {\r\n        position: \"right\",\r\n            // maxHeight: \"200px\"\r\n        fullSize: true,\r\n      ...(globalState.setGraphProperty && {  labels: {\r\n            boxHeight: 100,\r\n            boxWidth: 100,\r\n            font: {\r\n              size: 30,\r\n            },\r\n          }, }),\r\n\r\n      },\r\n      tooltip: {\r\n        enabled: false,\r\n      },\r\n    }\r\n  }\r\n   \r\n  return (\r\n    <Doughnut\r\n\r\n      data={data}\r\n      height={400}\r\n      width={400}\r\n      options={options}\r\n    />\r\n  );\r\n});\r\n\r\nexport default Graph;\r\n","import React from \"react\";\r\n\r\nconst ShowEntities = (props) => {\r\n  const { entities } = props;\r\n  console.log(\"et \", entities);\r\n  return (\r\n    <div className=\"mt-4\">\r\n      {\r\n        entities.length ?\r\n      <table className=\"table table-bordered table-striped \">\r\n        <tbody>\r\n         \r\n          <tr>\r\n            <th>Type</th>\r\n            <th>Name</th>\r\n            <th>Relevance</th>\r\n            <th>Sentiment</th>\r\n          </tr>\r\n          {entities.map((e, i) => {\r\n              let color = e.sentiment.label === \"negative\" ? \"red\" :  e.sentiment.label === \"positive\" ? \"green\" : \"black\";\r\n            return (\r\n              <tr>\r\n                <td>{e.type}</td>\r\n\r\n                <td>{e.text}</td>\r\n\r\n                <td>{e.relevance}</td>\r\n\r\n                <td style={{ color: color }}>{e.sentiment.label}</td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      :\r\n      <h3>No entities are available in your searching text</h3>\r\n}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ShowEntities;\r\n","import React, {Fragment, useContext } from \"react\";\r\nimport { StoreContext } from \"../reducer/reducer\";\r\n\r\nimport renderGraphData from \"../utilis/graphData\";\r\nimport Graph from \"./graph\";\r\nimport ShowEntities from \"./entities\";\r\n\r\nconst ShowResult = () => {\r\n    const [globalState] = useContext(StoreContext);\r\n\r\n    return (\r\n        <Fragment>\r\n        <div className=\"col-12\">\r\n        {globalState.showGraph ? (\r\n          <Graph\r\n            data={renderGraphData(globalState.emotions)}\r\n            options={globalState.options}\r\n          />\r\n        ) : globalState.showEntities ? (\r\n          <ShowEntities entities={globalState.entities} />\r\n        ) : (\r\n          globalState.sentimentOutput\r\n        )}\r\n        <br />\r\n        { globalState.showMessage ? globalState.message : null}\r\n       \r\n      </div>\r\n      </Fragment>\r\n    )\r\n}\r\n\r\nexport default ShowResult;","import \"./bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport React, {useEffect, useReducer} from \"react\";\r\nimport { StoreContext } from \"./reducer/reducer\";\r\nimport { types } from \"./reducer/actionTypes\";\r\nimport { INITIAL_STATE, reducer } from \"./reducer/reducer\";\r\n\r\nimport Report from \"./components/report\";\r\nimport Heading from \"./components/heading\";\r\nimport ResultHeading from \"./components/resultHeading\";\r\nimport ShowResult from \"./components/showResult\";\r\n\r\nconst App = () => {\r\n  const [globalState, dispatch] = useReducer(reducer, INITIAL_STATE);\r\n\r\n  useEffect(() => {\r\n      if(window.innerWidth < 700){\r\n        dispatch({ type: types.SET_GRAPH_PROPERTY, payload: false })\r\n      }\r\n  },[])\r\n\r\n  let sendForEmotionAnalysis = async () => {\r\n    dispatch({ type: types.SHOW_MESSAGE, payload: true });\r\n\r\n    let text = document.getElementById(\"textinput\").value;\r\n    // let target = document.getElementById(\"target\");\r\n\r\n    if (text == \"\") {\r\n      alert(\"Please enter the sentence\");\r\n      dispatch({ type: types.SHOW_MESSAGE, payload: false });\r\n      return;\r\n    }\r\n    if (globalState.mode == \"url\" && !text.includes(\"http\")) {\r\n      alert(\"Please type url or change the input type !!\");\r\n      dispatch({ type: types.SHOW_MESSAGE, payload: false });\r\n      return;\r\n    }\r\n\r\n    let url = \".\";\r\n    let mode = globalState.mode;\r\n    url =\r\n      url +\r\n      \"/\" +\r\n      mode +\r\n      \"/emotion?\" +\r\n      mode +\r\n      \"=\" +\r\n      document.getElementById(\"textinput\").value;\r\n\r\n    await fetch(url).then((response) => {\r\n      response.json().then((res) => {\r\n        if (res.err && res.err.status === 400) {\r\n          alert(res.err.message);\r\n          return;\r\n        }\r\n\r\n        let data = res.keywords[0].emotion;\r\n        let emotionData = Object.keys(data).map((e, i) => {\r\n          return data[e];\r\n        });\r\n\r\n        dispatch({ type: types.UPDATE_EMOTIONS, payload: emotionData });\r\n        dispatch({ type: types.SHOW_GRAPH, payload: true });\r\n        dispatch({ type: types.DISABLE_BUTTON, payload: false });\r\n        dispatch({ type: types.SHOW_MESSAGE, payload: false });\r\n        dispatch({ type: types.UPDATE_REPORT, payload: res });\r\n        dispatch({ type: types.UPDATE_ENTITIES, payload: res.entities });\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <StoreContext.Provider value={[globalState, dispatch]}>\r\n        <div className=\"container-fluid main\">\r\n          {/* // input-section */}\r\n          <Heading\r\n            sendForEmotionAnalysis={sendForEmotionAnalysis}\r\n          />\r\n\r\n          {/* output section */}\r\n          <div className=\"row output-section\">\r\n            {/* // Report section */}\r\n            <div className=\"col-sm-12 col-md-3\" id=\"report-section\">\r\n              <div>\r\n                <h5>Analysis Report</h5>\r\n                <Report />\r\n              </div>\r\n            </div>\r\n\r\n            {/* // Result Section  */}\r\n            <div className=\"col-sm-12 col-md-9\" id=\"result-section\">\r\n              <div className=\"row result-heading\">\r\n                <ResultHeading />\r\n              </div>\r\n              <div className=\"row result-display\">\r\n                <ShowResult />\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"col-4\"></div> */}\r\n          </div>\r\n        </div>\r\n      </StoreContext.Provider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}