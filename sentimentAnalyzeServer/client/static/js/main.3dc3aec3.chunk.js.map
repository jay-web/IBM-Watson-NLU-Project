{"version":3,"sources":["components/buttons.js","EmotionTable.js","components/report.js","components/doc.js","utilis/graphData.js","components/entities.js","components/graph.js","components/heading.js","App.js","reportWebVitals.js","index.js"],"names":["Buttons","React","Component","props","text","type","category","renderOutput","size","disabled","className","onClick","changeUi","Report","result","language","usage","text_characters","sentiment","document","label","score","keywords","emotion","sadness","joy","fear","disgust","anger","Doc","style","fontSize","marginTop","marginBottom","renderGraphData","emotions","labels","datasets","data","backgroundColor","borderColor","borderWidth","hoverOffset","EntitiesData","entities","console","log","map","e","i","color","relevance","Graph","memo","options","height","width","Heading","showTextBox","sendForEmotionAnalysis","rows","cols","id","placeholder","App","state","mode","sentimentOutput","message","showMessage","report","showGraph","showEntities","buttonDisabled","plugins","legend","position","fullSize","boxHeight","boxWidth","font","tooltip","enabled","input_mode","setState","getElementById","value","a","alert","includes","url","fetch","then","response","json","res","err","status","emotionData","Object","keys","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3dc3aec3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Buttons = (props) => {\n    let {text, type, category, renderOutput, size, disabled} = props;\n\n    let changeUi = (category) => {\n      \n        renderOutput(category)\n        \n    }\n  return (\n    <>\n      <button\n        className={`btn btn-${type} btn-${size} mr-2 mt-2`}\n        onClick={() => changeUi({category}) }\n        disabled={disabled}\n      >\n        {text}\n      </button>\n\n      {/* <button\n        className=\"btn btn-dark mt-2\"\n        onClick={() => {\n          this.renderOutput({category});\n        }}\n      >\n        URL\n      </button> */}\n    </>\n  );\n};\n\nexport default Buttons;","import React from \"react\";\nimport \"./bootstrap.min.css\";\n\nclass EmotionTable extends React.Component {\n  render() {\n    //Returns the emotions as an HTML table\n    console.log(this.props.emotions);\n    let emotions = this.props.emotions;\n    return (\n      <div className=\"mt-4\">\n        <table className=\"table table-bordered\">\n          <tbody>\n            {\n              /*Write code to use the .map method that you worked on in the \n              Hands-on React lab to extract the emotions. If you are stuck,\n              please click the instructions to see how to implement a map*/\n\n              Object.keys(emotions).map((e, i) => {\n                return (\n                  <tr key={i}>\n                    <th>{e}</th>\n                    <td>{emotions[e]}</td>\n                  </tr>\n                );\n              })\n            }\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\nexport default EmotionTable;\n","import React from \"react\";\n\nconst Report = (props) => {\n  let { result } = props;\n  return (\n    <div className=\"report-section\">\n      \n        <div>\n          <li>\n            <span>Language:</span>\n            {result ? result.language : \"\"}\n          </li>\n          <li>\n            <span>Total characters:</span> {result ? result.usage.text_characters: \"\"}\n          </li>\n          <li>\n            <span>Sentiment: </span>\n            {result ? result.sentiment.document.label: \"\"}\n          </li>\n          <li>\n            <span>Sentiment Score:</span> {result ? result.sentiment.document.score : \"\"}\n          </li>\n          <li>\n            <span>Sadness:</span> {result ? result.keywords[0].emotion.sadness : \"\"}\n          </li>\n          <li>\n            <span>Joy:</span> {result ? result.keywords[0].emotion.joy : \"\"}\n          </li>\n          <li>\n            <span>Fear:</span> {result ? result.keywords[0].emotion.fear: \"\"}\n          </li>\n          <li>\n            <span>Disgust:</span> {result ? result.keywords[0].emotion.disgust: \"\"}\n          </li>\n          <li>\n            <span>Anger:</span> {result ? result.keywords[0].emotion.anger: \"\"}\n          </li>\n        </div>\n      \n    </div>\n  );\n};\n\nexport default Report;\n","import React from \"react\";\n\nconst Doc = () => {\n    return (\n        <div>\n            <h5 style={{fontSize: \"2rem\", marginTop: \"3rem\", marginBottom: \"1rem\"}}>Sentiment Emotions Analyzer</h5>\n            <p>Natural Processing Understanding enable us to analyse the text or url of your website page</p>\n            <p>Type any text or url in above text box, click the Analysis Emotion button</p>\n        \n        </div>\n    )\n\n\n}\n\nexport default Doc;","const renderGraphData = (emotions) => {\n    const data = {\n      labels: [\"Sadness\", \"Joy\", \"Fear\", \"Disgust\", \"Anger\"],\n      datasets: [\n        {\n          label: \"# of Emotions\",\n          data: emotions,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(28, 112, 196,0.8)\",\n            \"rgba(196, 112, 28,0.8)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(196, 28, 28, 0.8)\",\n           \n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(196, 28, 28, 0.8)\",\n          ],\n          borderWidth: 1,\n          hoverOffset: 4\n        },\n      ],\n    };\n    return data;\n  };\n\n  export default renderGraphData","import React from \"react\";\n\nconst EntitiesData = (props) => {\n  const { entities } = props;\n  console.log(\"et \", entities);\n  return (\n    <div className=\"mt-4\">\n      <table className=\"table table-bordered table-striped \">\n        <tbody>\n         \n          <tr>\n            <th>Type</th>\n            <th>Name</th>\n            <th>Relevance</th>\n            <th>Sentiment</th>\n          </tr>\n          {entities.map((e, i) => {\n              let color = e.sentiment.label === \"negative\" ? \"red\" :  e.sentiment.label === \"positive\" ? \"green\" : \"black\";\n            return (\n              <tr>\n                <td>{e.type}</td>\n\n                <td>{e.text}</td>\n\n                <td>{e.relevance}</td>\n\n                <td style={{ color: color }}>{e.sentiment.label}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default EntitiesData;\n","import React from \"react\";\n\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst Graph = React.memo((props) => {\n  const { data, options } = props;\n   \n  return (\n    <Doughnut\n\n      data={data}\n      height={400}\n      width={400}\n      options={options}\n    />\n  );\n});\n\nexport default Graph;\n","import React from \"react\";\nimport \"../../src/bootstrap.min.css\";\nimport \"../../src/App.css\";\nimport Buttons from \"../components/buttons\";\n\nconst Heading = (props) => {\n    const {renderOutput, showTextBox,sendForEmotionAnalysis} = props;\n\n\n    return (\n        <div className=\"row input-section\">\n        <div className=\"col-3 selection mb-2 mt-1\">\n          <h5>Select Input type</h5>\n          <Buttons\n            type=\"info\"\n            text=\"Text\"\n            category=\"text\"\n            renderOutput={renderOutput}\n            size=\"sm\"\n            disabled={false}\n          />\n          <Buttons\n            type=\"dark\"\n            text=\"Url\"\n            category=\"url\"\n            renderOutput={renderOutput}\n            size=\"sm\"\n            disabled={false}\n          />\n\n          {/* <input className=\"mt-2\" type=\"text\" id=\"target\" name=\"target\" placeholder=\"Words to target (optional)\" /> */}\n        </div>\n        <div className=\"col-6 content-section\">\n          {showTextBox ? (\n            <textarea\n              rows=\"4\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type text here to analyze\"\n            />\n          ) : (\n            <textarea\n              rows=\"1\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type url here to analyze\"\n            />\n          )}\n        </div>\n        <div className=\"col-3 navigation-section\">\n          <div className=\"selection mb-2 mt-1\">\n            <h5>Run Analyze type</h5>\n          \n\n            <Buttons\n              type=\"primary\"\n              text=\" Analyze Emotion\"\n              category=\"\"\n              renderOutput={sendForEmotionAnalysis}\n              size=\"sm\"\n              disabled={false}\n            />\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Heading;","import \"./bootstrap.min.css\";\nimport \"./App.css\";\nimport EmotionTable from \"./EmotionTable.js\";\nimport React from \"react\";\nimport Buttons from \"./components/buttons\";\nimport Report from \"./components/report\";\nimport Doc from \"./components/doc\";\nimport { Doughnut } from \"react-chartjs-2\";\nimport renderGraphData from \"./utilis/graphData\";\nimport EntitiesData from \"./components/entities\";\nimport Graph from \"./components/graph\";\nimport Heading from \"./components/heading\";\n\nclass App extends React.Component {\n  /*\n  We are setting the component as a state named innercomp.\n  When this state is accessed, the HTML that is set as the \n  value of the state, will be returned. The initial input mode\n  is set to text\n  */\n  state = {\n    showTextBox: true,\n    mode: \"text\",\n    sentimentOutput: <Doc />,\n    sentiment: true,\n    color: \"\",\n    \n    message: \"Please wait ...\",\n    showMessage: false,\n    report: null,\n    showGraph: false,\n    emotions: [],\n    entities: [],\n    showEntities: false,\n    buttonDisabled:true,\n    options: {\n      plugins: {\n        legend: {\n          position: 'right',\n          // maxHeight: \"200px\"\n          fullSize: true,\n          labels:{\n            boxHeight: 100,\n            boxWidth: 100,\n            font:{\n              size:30\n            }\n          },\n         \n        },\n        tooltip:{\n          enabled:false\n        }\n      \n      }\n    }\n  };\n\n  /*\n  This method returns the component based on what the input mode is.\n  If the requested input mode is \"text\" it returns a textbox with 4 rows.\n  If the requested input mode is \"url\" it returns a textbox with 1 row.\n  */\n\n  renderOutput = (input_mode) => {\n    if (input_mode.category === \"text\") {\n      this.setState({\n        mode: \"text\",\n        showTextBox: true,\n      });\n    } else {\n      this.setState({\n        mode: \"url\",\n        showTextBox: false,\n      });\n    }\n\n    this.setState({\n      sentimentOutput:  <Doc />,\n      sentiment: true,\n      text: \"\",\n      showGraph: false,\n      showEntities:false,\n      report:null\n    });\n    document.getElementById(\"textinput\").value = \"\";\n  };\n\n  \n\n  sendForEmotionAnalysis = async () => {\n    this.setState({ showMessage: true });\n    let text = document.getElementById(\"textinput\").value;\n    // let target = document.getElementById(\"target\");\n\n    if (text == \"\") {\n      alert(\"Please enter the sentence\");\n      this.setState({ showMessage: false });\n      return;\n    }\n    if (this.state.mode == \"url\" && !text.includes(\"http\")) {\n      alert(\"Please type url or change the input type !!\");\n      this.setState({ showMessage: false });\n      return;\n    }\n    \n    this.setState({ sentiment: false });\n\n    let url = \".\";\n    let mode = this.state.mode;\n    url =\n      url +\n      \"/\" +\n      mode +\n      \"/emotion?\" +\n      mode +\n      \"=\" +\n      document.getElementById(\"textinput\").value;\n\n     fetch(url).then((response) => {\n        response.json().then((res) => {\n          console.log(\"response \", res);\n          if(res.err && res.err.status === 400){\n            alert(res.err.message);\n            return;\n          }\n\n         \n            console.log(\"response \", res);\n            this.setState({ report: res, entities: res.entities });\n            \n            let data = res.keywords[0].emotion;\n            // res.send(analysisResults.result.keywords[0].emotion, null, 2);\n            if (data.err) {\n              this.setState({ text: <h1>Please enter more text to analyse</h1> });\n              return;\n            }\n            this.setState({ showMessage: false });\n            let emotionData = Object.keys(data).map((e, i) => {\n              return data[e];\n            });\n            this.setState({ emotions: emotionData, showGraph: true, buttonDisabled:false });\n          \n\n         \n         \n\n          // this.setState({ sentimentOutput: <EmotionTable emotions={data} /> });\n          // document.getElementById(\"textinput\").value = \"\";\n        });\n      });\n    \n  };\n\n  \n\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container-fluid main\">\n          {/* // input-section */}\n         <Heading \n         renderOutput={this.renderOutput} \n         showTextBox={this.state.showTextBox}\n         sendForEmotionAnalysis={this.sendForEmotionAnalysis}\n\n         />\n\n          {/* output section */}\n          <div className=\"row output-section\">\n            <div className=\"col-3\" id=\"report-section\">\n              <div>\n                <h5>Analysis Report</h5>\n                <Report result={this.state.report} />\n              </div>\n            </div>\n           \n            <div className=\"col-9\" id=\"result-section\">\n              <div className=\"row result-heading\">\n                <div className=\"col-6 heading-content \">\n                \n                  <Buttons\n                    type=\"primary\"\n                    text=\"Doughnut Format\"\n                    category=\"\"\n                    renderOutput={() => this.setState({ showGraph: true,showEntities: false })}\n                    size=\"sm\"\n                    disabled={this.state.buttonDisabled}\n                  />\n                    <Buttons\n                    type=\"secondary\"\n                    text=\"Entities Data\"\n                    category=\"\"\n                    renderOutput={() => this.setState({ showEntities: true, showGraph: false })}\n                    size=\"sm\"\n                    disabled={this.state.buttonDisabled}\n                  />\n                </div>\n                <div className=\"col-6 heading-content \">\n                  <h5>Analysis Result</h5>\n                  <h6>{this.state.report ? this.state.showGraph ? \"( In Doughnut Format )\": \"( Entities Data Collection )\" : null}</h6>\n                </div>\n              </div>\n              <div className=\"row result-display\">\n                <div className=\"col-12\">\n                {this.state.showGraph ? \n                 <Graph data={renderGraphData(this.state.emotions)} options={this.state.options}/>\n                  : this.state.showEntities \n                  ? <EntitiesData entities={this.state.entities} /> \n                  :\n                  this.state.sentimentOutput\n\n  }\n                <br />\n                {this.state.showMessage ? this.state.message : null}\n                </div>\n                \n              </div>\n            </div>\n            {/* <div className=\"col-4\"></div> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}