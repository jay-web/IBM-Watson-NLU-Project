{"version":3,"sources":["reducer/actionTypes.js","components/doc.js","reducer/reducer.js","components/report.js","components/buttons.js","components/heading.js","components/resultHeading.js","utilis/graphData.js","components/graph.js","components/entities.js","components/showResult.js","App.js","reportWebVitals.js","index.js"],"names":["types","Doc","style","fontSize","marginTop","marginBottom","StoreContext","React","createContext","INITIAL_STATE","showTextBox","mode","sentimentOutput","color","message","showMessage","report","showGraph","emotions","entities","showEntities","buttonDisabled","options","plugins","legend","position","fullSize","labels","boxHeight","boxWidth","font","size","tooltip","enabled","reducer","state","action","type","payload","Report","useContext","console","log","renderEmoji","emotion","className","language","usage","text_characters","sentiment","document","label","score","keywords","sadness","joy","fear","disgust","anger","Buttons","props","text","category","renderOutput","disabled","onClick","changeUi","Heading","sendForEmotionAnalysis","globalState","dispatch","textBoxRef","useRef","useEffect","current","focus","switchTextBox","input_mode","value","rows","cols","id","placeholder","ref","ResultHeading","renderGraphData","datasets","data","backgroundColor","borderColor","borderWidth","hoverOffset","Graph","memo","height","width","ShowEntities","length","map","e","i","relevance","ShowResult","App","useReducer","a","getElementById","alert","includes","url","fetch","then","response","json","res","err","status","emotionData","Object","keys","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f7b1bc00.chunk.js","sourcesContent":["\nexport const types = {\n    SHOW_TEXTBOX : 'showTextBox',\n    UPDATE_EMOTIONS :'updateEmotions',\n    UPDATE_ENTITIES : 'updateEntities',\n    SHOW_MESSAGE : 'showMessage',\n    SHOW_GRAPH : 'showGraph',\n    SHOW_ENTITIES : 'showEntities',\n    UPDATE_COLOR : 'updateColor',\n    UPDATE_REPORT : 'updateReport',\n    UPDATE_MODE : 'updateMode',\n    UPDATE_SENTIMENT_OUTPUT : 'update_sentiment_output',\n    DISABLE_BUTTON : 'disableButton',\n}\n\n","import React from \"react\";\n\nconst Doc = () => {\n    return (\n        <div>\n            <h5 style={{fontSize: \"2rem\", marginTop: \"3rem\", marginBottom: \"1rem\"}}>Sentiment Emotions Analyzer</h5>\n            <p>Natural Language Understanding uses deep learning to extract meaning and metadata from unstructured text data. Get underneath your data using text analytics to extract categories, classification, entities, keywords, sentiment, emotion, relations, and syntax.\n            It enable us to analyse the text or url of your website page.</p>\n            <p>Type any text or url in above text box, click the Analysis Emotion button</p>\n        \n        </div>\n    )\n\n\n}\n\nexport default Doc;","import React from 'react';\nimport {types} from \"./actionTypes\";\nimport Doc from \"../components/doc\";\n\nexport const StoreContext = React.createContext([]);\n\n\nexport const INITIAL_STATE = {\n  showTextBox: true,\n  mode: \"text\",\n  sentimentOutput: <Doc />,\n  color: \"\",\n  message: \"Please wait ...\",\n  showMessage: false,\n  report: null,\n  showGraph: false,\n  emotions: [],\n  entities: [],\n  showEntities: false,\n  buttonDisabled: true,\n  options: {\n    plugins: {\n      legend: {\n        position: \"right\",\n        // maxHeight: \"200px\"\n        fullSize: true,\n        labels: {\n          boxHeight: 100,\n          boxWidth: 100,\n          font: {\n            size: 30,\n          },\n        },\n      },\n      tooltip: {\n        enabled: false,\n      },\n    },\n  },\n};\n\n\nexport const reducer = (state, action) => {\n    switch(action.type) {\n        case types.SHOW_TEXTBOX :\n            return {...state, showTextBox: action.payload}\n        case types.UPDATE_MODE :\n            return {...state, mode : action.payload}\n        case types.UPDATE_SENTIMENT_OUTPUT :\n            return {...state, sentimentOutput: action.payload}\n        case types.UPDATE_COLOR :\n            return {...state, color: action.payload}\n        case types.SHOW_MESSAGE :\n            return {...state, showMessage: action.payload}\n        case types.UPDATE_REPORT :\n            return {...state, report : action.payload}\n        case types.SHOW_GRAPH :\n            return {...state, showGraph : action.payload}\n        case types.UPDATE_EMOTIONS :\n            return {...state, emotions: action.payload }\n        case types.UPDATE_ENTITIES :\n            return {...state, entities : action.payload}\n        case types.SHOW_ENTITIES :\n            return {...state, showEntities : action.payload}\n        case types.DISABLE_BUTTON :\n            return {...state, buttonDisabled : action.payload }\n        default :\n            return state;\n    }\n}\n\n","import React, {useContext} from \"react\";\nimport { StoreContext } from \"../reducer/reducer\";\n\nconst Report = () => {\n  const [globalState] = useContext(StoreContext);\n\n  let { report } = globalState;\n  console.log(\"report \", report);\n  let renderEmoji = (emotion) => {\n      let emojies = {\"positive\": \"😊\", \"negative\": \"😠\", \"neutral\": \"😐\", \"joy\":\"😃\", \"sadness\": \"😢\", \"fear\": \"😨\", \"anger\": \"😡\", \"disgust\": \"😖\"}\n      return emojies[emotion];\n  }\n  return (\n    <div className=\"report-section\">\n      \n        <div>\n          <li>\n            <span>Language:</span>\n            {report ? report.language : \"\"}\n          </li>\n          <li>\n            <span>Total characters:</span> {report ? report.usage.text_characters: \"\"} \n          </li>\n          <li>\n            <span>Sentiment: </span>\n            {report ? report.sentiment.document.label: \"\"} {report ? renderEmoji(report.sentiment.document.label) : null}\n          </li>\n          <li>\n            <span>Sentiment Score:</span> {report ? report.sentiment.document.score : \"\"}\n          </li>\n          <li>\n            <span>Sadness:</span> {report ? report.keywords[0].emotion.sadness : \"\"} {report ? renderEmoji(\"sadness\") : null}\n          </li>\n          <li>\n            <span>Joy:</span> {report ? report.keywords[0].emotion.joy : \"\"} {report ? renderEmoji(\"joy\") : null}\n          </li>\n          <li>\n            <span>Fear:</span> {report ? report.keywords[0].emotion.fear : \"\"} {report ? renderEmoji(\"fear\") : null}\n          </li>\n          <li>\n            <span>Disgust:</span> {report ? report.keywords[0].emotion.disgust : \"\"} {report ? renderEmoji(\"disgust\"  ) : null}\n          </li>\n          <li>\n            <span>Anger:</span> {report ? report.keywords[0].emotion.anger: \"\"} {report ? renderEmoji(\"anger\") : null}\n          </li>\n        </div>\n      \n    </div>\n  );\n};\n\nexport default Report;\n","import React from \"react\";\n\nconst Buttons = (props) => {\n    let {text, type, category, renderOutput, size, disabled} = props;\n\n    let changeUi = (category) => {\n      \n        renderOutput(category)\n        \n    }\n  return (\n    <>\n      <button\n        className={`btn btn-${type} btn-${size} mr-2 mt-2`}\n        onClick={() => changeUi({category}) }\n        disabled={disabled}\n      >\n        {text}\n      </button>\n\n      {/* <button\n        className=\"btn btn-dark mt-2\"\n        onClick={() => {\n          this.renderOutput({category});\n        }}\n      >\n        URL\n      </button> */}\n    </>\n  );\n};\n\nexport default Buttons;","import React, {useContext, useEffect, useRef, useState} from \"react\";\nimport { StoreContext } from \"../reducer/reducer\";\nimport \"../../src/bootstrap.min.css\";\nimport \"../../src/App.css\";\nimport Buttons from \"../components/buttons\";\nimport { types } from \"../reducer/actionTypes\";\nimport Doc from \"./doc\";\n\nconst Heading = (props) => {\n    const {sendForEmotionAnalysis} = props;\n    const [globalState, dispatch ] = useContext(StoreContext);\n    const {showTextBox } = globalState;\n    const textBoxRef = useRef(null);\n\n    useEffect(() => {\n      textBoxRef.current.focus();\n    }, [])\n\n    let switchTextBox = (input_mode) => {\n      textBoxRef.current.focus();\n      dispatch({ type: types.DISABLE_BUTTON, payload: true});\n  \n      if (input_mode.category === \"text\") {\n          dispatch({ type: types.UPDATE_MODE, payload: 'text'});\n          dispatch({ type: types.SHOW_TEXTBOX, payload: true});\n  \n       \n      } else {\n          dispatch({ type: types.UPDATE_MODE, payload: 'url'});\n          dispatch({ type: types.SHOW_TEXTBOX, payload: false});\n      \n      }\n      dispatch({ type: types.UPDATE_SENTIMENT_OUTPUT, payload: <Doc /> });\n      dispatch({ type: types.SHOW_GRAPH, payload: false});\n      dispatch({ type: types.SHOW_ENTITIES, payload: false});\n      dispatch({ type: types.UPDATE_REPORT, payload: null});\n  \n     \n      textBoxRef.current.value = \"\"\n    };\n\n\n    return (\n        <div className=\"row input-section\">\n        <div className=\"col-3 selection mb-2 mt-1\">\n          <h5>Select Input type</h5>\n          <Buttons\n            type=\"info\"\n            text=\"Text\"\n            category=\"text\"\n            renderOutput={switchTextBox}\n            size=\"sm\"\n            disabled={false}\n          />\n          <Buttons\n            type=\"dark\"\n            text=\"Url\"\n            category=\"url\"\n            renderOutput={switchTextBox}\n            size=\"sm\"\n            disabled={false}\n          />\n\n          {/* <input className=\"mt-2\" type=\"text\" id=\"target\" name=\"target\" placeholder=\"Words to target (optional)\" /> */}\n        </div>\n        <div className=\"col-6 content-section\">\n          {showTextBox ? (\n            <textarea\n              rows=\"4\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type text here to analyze\"\n              ref={textBoxRef}\n            />\n          ) : (\n            <textarea\n              rows=\"1\"\n              cols=\"70\"\n              id=\"textinput\"\n              placeholder=\"Please type url here to analyze\"\n              ref={textBoxRef}\n            />\n          )}\n        </div>\n        <div className=\"col-3 navigation-section\">\n          <div className=\"selection mb-2 mt-1\">\n            <h5>Run Analyze type</h5>\n          \n\n            <Buttons\n              type=\"primary\"\n              text=\" Analyze Emotion\"\n              category=\"\"\n              renderOutput={sendForEmotionAnalysis}\n              size=\"sm\"\n              disabled={false}\n            />\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default Heading;","import React, {Fragment, useContext} from \"react\";\nimport { StoreContext } from \"../reducer/reducer\";\nimport Buttons from \"./buttons\";\nimport \"../../src/bootstrap.min.css\";\nimport { types } from \"../reducer/actionTypes\";\n\nconst ResultHeading = () => {\n    const [globalState, dispatch ] = useContext(StoreContext);\n    return (\n        <Fragment>\n        <div className=\"col-6 heading-content \">\n        <Buttons\n          type=\"primary\"\n          text=\"Doughnut Format\"\n          category=\"\"\n          renderOutput={() => {\n            dispatch({type: types.SHOW_GRAPH, payload: true });\n            dispatch({type: types.SHOW_ENTITIES, payload: false })\n          }\n          }\n          size=\"sm\"\n          disabled={globalState.buttonDisabled}\n        />\n\n        <Buttons\n          type=\"secondary\"\n          text=\"Entities Data\"\n          category=\"\"\n          renderOutput={() => {\n             dispatch({type: types.SHOW_GRAPH , payload: false});\n             dispatch({type: types.SHOW_ENTITIES, payload: true });\n          }\n          }\n          size=\"sm\"\n          disabled={globalState.buttonDisabled}\n        />\n        \n      </div>\n      <div className=\"col-6 heading-content \">\n                  <h5>Analysis Result</h5>\n                  <h6>\n                    {globalState.report\n                      ? globalState.showGraph\n                        ? \"( In Doughnut Format )\"\n                        : \"( Entities Data Collection )\"\n                      : null}\n                  </h6>\n                </div>\n      </Fragment>\n      \n    )\n}\n\nexport default ResultHeading;","const renderGraphData = (emotions) => {\n  console.log(\"emotions \", emotions);\n    const data = {\n      labels: [`Sadness - ( ${emotions[0]} )`, `Joy - ( ${emotions[1]} )`, `Fear - ( ${emotions[2]} )`, `Disgust - ( ${emotions[3]} )`, `Anger - ( ${emotions[4]} )`],\n      datasets: [\n        {\n          label: \"# of Emotions\",\n          data: emotions,\n          backgroundColor: [\n            \"rgba(255, 99, 132, 0.2)\",\n            \"rgba(28, 112, 196,0.8)\",\n            \"rgba(196, 112, 28,0.8)\",\n            \"rgba(75, 192, 192, 0.2)\",\n            \"rgba(196, 28, 28, 0.8)\",\n           \n          ],\n          borderColor: [\n            \"rgba(255, 99, 132, 1)\",\n            \"rgba(54, 162, 235, 1)\",\n            \"rgba(255, 206, 86, 1)\",\n            \"rgba(75, 192, 192, 1)\",\n            \"rgba(153, 102, 255, 1)\",\n            \"rgba(196, 28, 28, 0.8)\",\n          ],\n          borderWidth: 1,\n          hoverOffset: 4\n        },\n      ],\n    };\n    return data;\n  };\n\n  export default renderGraphData","import React from \"react\";\n\nimport { Doughnut } from \"react-chartjs-2\";\n\nconst Graph = React.memo((props) => {\n  const { data, options } = props;\n   \n  return (\n    <Doughnut\n\n      data={data}\n      height={400}\n      width={400}\n      options={options}\n    />\n  );\n});\n\nexport default Graph;\n","import React from \"react\";\n\nconst ShowEntities = (props) => {\n  const { entities } = props;\n  console.log(\"et \", entities);\n  return (\n    <div className=\"mt-4\">\n      {\n        entities.length ?\n      <table className=\"table table-bordered table-striped \">\n        <tbody>\n         \n          <tr>\n            <th>Type</th>\n            <th>Name</th>\n            <th>Relevance</th>\n            <th>Sentiment</th>\n          </tr>\n          {entities.map((e, i) => {\n              let color = e.sentiment.label === \"negative\" ? \"red\" :  e.sentiment.label === \"positive\" ? \"green\" : \"black\";\n            return (\n              <tr>\n                <td>{e.type}</td>\n\n                <td>{e.text}</td>\n\n                <td>{e.relevance}</td>\n\n                <td style={{ color: color }}>{e.sentiment.label}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      :\n      <h3>No entities are available in your searching text</h3>\n}\n    </div>\n  );\n};\n\nexport default ShowEntities;\n","import React, {Fragment, useContext } from \"react\";\nimport { StoreContext } from \"../reducer/reducer\";\n\nimport renderGraphData from \"../utilis/graphData\";\nimport Graph from \"./graph\";\nimport ShowEntities from \"./entities\";\n\nconst ShowResult = () => {\n    const [globalState] = useContext(StoreContext);\n\n    return (\n        <Fragment>\n        <div className=\"col-12\">\n        {globalState.showGraph ? (\n          <Graph\n            data={renderGraphData(globalState.emotions)}\n            options={globalState.options}\n          />\n        ) : globalState.showEntities ? (\n          <ShowEntities entities={globalState.entities} />\n        ) : (\n          globalState.sentimentOutput\n        )}\n        <br />\n        { globalState.showMessage ? globalState.message : null}\n       \n      </div>\n      </Fragment>\n    )\n}\n\nexport default ShowResult;","import \"./bootstrap.min.css\";\nimport \"./App.css\";\n\nimport React, { useReducer } from \"react\";\nimport { StoreContext } from \"./reducer/reducer\";\nimport { types } from \"./reducer/actionTypes\";\nimport { INITIAL_STATE, reducer } from \"./reducer/reducer\";\n\nimport Report from \"./components/report\";\nimport Heading from \"./components/heading\";\nimport ResultHeading from \"./components/resultHeading\";\nimport ShowResult from \"./components/showResult\";\n\nconst App = () => {\n  const [globalState, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  let sendForEmotionAnalysis = async () => {\n    dispatch({ type: types.SHOW_MESSAGE, payload: true });\n\n    let text = document.getElementById(\"textinput\").value;\n    // let target = document.getElementById(\"target\");\n\n    if (text == \"\") {\n      alert(\"Please enter the sentence\");\n      dispatch({ type: types.SHOW_MESSAGE, payload: false });\n      return;\n    }\n    if (globalState.mode == \"url\" && !text.includes(\"http\")) {\n      alert(\"Please type url or change the input type !!\");\n      dispatch({ type: types.SHOW_MESSAGE, payload: false });\n      return;\n    }\n\n    let url = \".\";\n    let mode = globalState.mode;\n    url =\n      url +\n      \"/\" +\n      mode +\n      \"/emotion?\" +\n      mode +\n      \"=\" +\n      document.getElementById(\"textinput\").value;\n\n    await fetch(url).then((response) => {\n      response.json().then((res) => {\n        if (res.err && res.err.status === 400) {\n          alert(res.err.message);\n          return;\n        }\n\n        let data = res.keywords[0].emotion;\n        let emotionData = Object.keys(data).map((e, i) => {\n          return data[e];\n        });\n\n        dispatch({ type: types.UPDATE_EMOTIONS, payload: emotionData });\n        dispatch({ type: types.SHOW_GRAPH, payload: true });\n        dispatch({ type: types.DISABLE_BUTTON, payload: false });\n        dispatch({ type: types.SHOW_MESSAGE, payload: false });\n        dispatch({ type: types.UPDATE_REPORT, payload: res });\n        dispatch({ type: types.UPDATE_ENTITIES, payload: res.entities });\n      });\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <StoreContext.Provider value={[globalState, dispatch]}>\n        <div className=\"container-fluid main\">\n          {/* // input-section */}\n          <Heading\n            sendForEmotionAnalysis={sendForEmotionAnalysis}\n          />\n\n          {/* output section */}\n          <div className=\"row output-section\">\n            {/* // Report section */}\n            <div className=\"col-3\" id=\"report-section\">\n              <div>\n                <h5>Analysis Report</h5>\n                <Report />\n              </div>\n            </div>\n\n            {/* // Result Section  */}\n            <div className=\"col-9\" id=\"result-section\">\n              <div className=\"row result-heading\">\n                <ResultHeading />\n              </div>\n              <div className=\"row result-display\">\n                <ShowResult />\n              </div>\n            </div>\n            {/* <div className=\"col-4\"></div> */}\n          </div>\n        </div>\n      </StoreContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}